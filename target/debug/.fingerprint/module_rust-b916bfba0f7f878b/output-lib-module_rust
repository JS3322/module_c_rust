{"message":"this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.","code":{"code":"array_into_iter","explanation":null},"level":"warning","spans":[{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1758,"byte_end":1767,"line_start":59,"line_end":59,"column_start":67,"column_end":76,"is_primary":true,"text":[{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":67,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/perceptron/perceptron.rs","byte_start":90,"byte_end":105,"line_start":4,"line_end":4,"column_start":13,"column_end":28,"is_primary":false,"text":[{"text":"    let x = matrix![x1, x2];","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"matrix!","def_site_span":{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1225,"byte_end":1946,"line_start":45,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! matrix {","highlight_start":1,"highlight_end":1},{"text":"    () => {","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":1},{"text":"            // Handle the case when called with no arguments, i.e. matrix![]","highlight_start":1,"highlight_end":1},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":1},{"text":"            Matrix::new(0, 0, vec![])","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"    ($( $( $x: expr ),*);*) => {","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":1},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":1},{"text":"            let data_as_nested_array = [ $( [ $($x),* ] ),* ];","highlight_start":1,"highlight_end":1},{"text":"            let rows = data_as_nested_array.len();","highlight_start":1,"highlight_end":1},{"text":"            let cols = data_as_nested_array[0].len();","highlight_start":1,"highlight_end":1},{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":1,"highlight_end":1},{"text":"                .flat_map(|row| row.into_iter())","highlight_start":1,"highlight_end":1},{"text":"                .cloned()","highlight_start":1,"highlight_end":1},{"text":"                .collect();","highlight_start":1,"highlight_end":1},{"text":"            Matrix::new(rows, cols, data_as_flat_array)","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"`#[warn(array_into_iter)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/perceptron/perceptron.rs:4:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let x = matrix![x1, x2];\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(array_into_iter)]` on by default\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.","code":{"code":"array_into_iter","explanation":null},"level":"warning","spans":[{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1758,"byte_end":1767,"line_start":59,"line_end":59,"column_start":67,"column_end":76,"is_primary":true,"text":[{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":67,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/perceptron/perceptron.rs","byte_start":119,"byte_end":136,"line_start":5,"line_end":5,"column_start":13,"column_end":30,"is_primary":false,"text":[{"text":"    let w = matrix![0.5, 0.5];","highlight_start":13,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"matrix!","def_site_span":{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1225,"byte_end":1946,"line_start":45,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! matrix {","highlight_start":1,"highlight_end":22},{"text":"    () => {","highlight_start":1,"highlight_end":12},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            // Handle the case when called with no arguments, i.e. matrix![]","highlight_start":1,"highlight_end":77},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":40},{"text":"            Matrix::new(0, 0, vec![])","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($( $( $x: expr ),*);*) => {","highlight_start":1,"highlight_end":33},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":40},{"text":"            let data_as_nested_array = [ $( [ $($x),* ] ),* ];","highlight_start":1,"highlight_end":63},{"text":"            let rows = data_as_nested_array.len();","highlight_start":1,"highlight_end":51},{"text":"            let cols = data_as_nested_array[0].len();","highlight_start":1,"highlight_end":54},{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":1,"highlight_end":78},{"text":"                .flat_map(|row| row.into_iter())","highlight_start":1,"highlight_end":49},{"text":"                .cloned()","highlight_start":1,"highlight_end":26},{"text":"                .collect();","highlight_start":1,"highlight_end":28},{"text":"            Matrix::new(rows, cols, data_as_flat_array)","highlight_start":1,"highlight_end":56},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/perceptron/perceptron.rs:5:13\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let w = matrix![0.5, 0.5];\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.","code":{"code":"array_into_iter","explanation":null},"level":"warning","spans":[{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1758,"byte_end":1767,"line_start":59,"line_end":59,"column_start":67,"column_end":76,"is_primary":true,"text":[{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":67,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/perceptron/perceptron.rs","byte_start":313,"byte_end":328,"line_start":16,"line_end":16,"column_start":13,"column_end":28,"is_primary":false,"text":[{"text":"    let x = matrix![x1, x2];","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"matrix!","def_site_span":{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1225,"byte_end":1946,"line_start":45,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! matrix {","highlight_start":1,"highlight_end":22},{"text":"    () => {","highlight_start":1,"highlight_end":12},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            // Handle the case when called with no arguments, i.e. matrix![]","highlight_start":1,"highlight_end":77},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":40},{"text":"            Matrix::new(0, 0, vec![])","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($( $( $x: expr ),*);*) => {","highlight_start":1,"highlight_end":33},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":40},{"text":"            let data_as_nested_array = [ $( [ $($x),* ] ),* ];","highlight_start":1,"highlight_end":63},{"text":"            let rows = data_as_nested_array.len();","highlight_start":1,"highlight_end":51},{"text":"            let cols = data_as_nested_array[0].len();","highlight_start":1,"highlight_end":54},{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":1,"highlight_end":78},{"text":"                .flat_map(|row| row.into_iter())","highlight_start":1,"highlight_end":49},{"text":"                .cloned()","highlight_start":1,"highlight_end":26},{"text":"                .collect();","highlight_start":1,"highlight_end":28},{"text":"            Matrix::new(rows, cols, data_as_flat_array)","highlight_start":1,"highlight_end":56},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/perceptron/perceptron.rs:16:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let x = matrix![x1, x2];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.","code":{"code":"array_into_iter","explanation":null},"level":"warning","spans":[{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1758,"byte_end":1767,"line_start":59,"line_end":59,"column_start":67,"column_end":76,"is_primary":true,"text":[{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":67,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/perceptron/perceptron.rs","byte_start":342,"byte_end":359,"line_start":17,"line_end":17,"column_start":13,"column_end":30,"is_primary":false,"text":[{"text":"    let w = matrix![0.5, 0.5];","highlight_start":13,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"matrix!","def_site_span":{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1225,"byte_end":1946,"line_start":45,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! matrix {","highlight_start":1,"highlight_end":22},{"text":"    () => {","highlight_start":1,"highlight_end":12},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            // Handle the case when called with no arguments, i.e. matrix![]","highlight_start":1,"highlight_end":77},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":40},{"text":"            Matrix::new(0, 0, vec![])","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($( $( $x: expr ),*);*) => {","highlight_start":1,"highlight_end":33},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":40},{"text":"            let data_as_nested_array = [ $( [ $($x),* ] ),* ];","highlight_start":1,"highlight_end":63},{"text":"            let rows = data_as_nested_array.len();","highlight_start":1,"highlight_end":51},{"text":"            let cols = data_as_nested_array[0].len();","highlight_start":1,"highlight_end":54},{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":1,"highlight_end":78},{"text":"                .flat_map(|row| row.into_iter())","highlight_start":1,"highlight_end":49},{"text":"                .cloned()","highlight_start":1,"highlight_end":26},{"text":"                .collect();","highlight_start":1,"highlight_end":28},{"text":"            Matrix::new(rows, cols, data_as_flat_array)","highlight_start":1,"highlight_end":56},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/perceptron/perceptron.rs:17:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let w = matrix![0.5, 0.5];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.","code":{"code":"array_into_iter","explanation":null},"level":"warning","spans":[{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1758,"byte_end":1767,"line_start":59,"line_end":59,"column_start":67,"column_end":76,"is_primary":true,"text":[{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":67,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/perceptron/perceptron.rs","byte_start":538,"byte_end":553,"line_start":28,"line_end":28,"column_start":13,"column_end":28,"is_primary":false,"text":[{"text":"    let x = matrix![x1, x2];","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"matrix!","def_site_span":{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1225,"byte_end":1946,"line_start":45,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! matrix {","highlight_start":1,"highlight_end":22},{"text":"    () => {","highlight_start":1,"highlight_end":12},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            // Handle the case when called with no arguments, i.e. matrix![]","highlight_start":1,"highlight_end":77},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":40},{"text":"            Matrix::new(0, 0, vec![])","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($( $( $x: expr ),*);*) => {","highlight_start":1,"highlight_end":33},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":40},{"text":"            let data_as_nested_array = [ $( [ $($x),* ] ),* ];","highlight_start":1,"highlight_end":63},{"text":"            let rows = data_as_nested_array.len();","highlight_start":1,"highlight_end":51},{"text":"            let cols = data_as_nested_array[0].len();","highlight_start":1,"highlight_end":54},{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":1,"highlight_end":78},{"text":"                .flat_map(|row| row.into_iter())","highlight_start":1,"highlight_end":49},{"text":"                .cloned()","highlight_start":1,"highlight_end":26},{"text":"                .collect();","highlight_start":1,"highlight_end":28},{"text":"            Matrix::new(rows, cols, data_as_flat_array)","highlight_start":1,"highlight_end":56},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/perceptron/perceptron.rs:28:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let x = matrix![x1, x2];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.","code":{"code":"array_into_iter","explanation":null},"level":"warning","spans":[{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1758,"byte_end":1767,"line_start":59,"line_end":59,"column_start":67,"column_end":76,"is_primary":true,"text":[{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":67,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/perceptron/perceptron.rs","byte_start":567,"byte_end":586,"line_start":29,"line_end":29,"column_start":13,"column_end":32,"is_primary":false,"text":[{"text":"    let w = matrix![-0.5, -0.5];","highlight_start":13,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"matrix!","def_site_span":{"file_name":"/Users/js/.cargo/registry/src/github.com-1ecc6299db9ec823/rulinalg-0.4.2/src/macros/matrix.rs","byte_start":1225,"byte_end":1946,"line_start":45,"line_end":66,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! matrix {","highlight_start":1,"highlight_end":22},{"text":"    () => {","highlight_start":1,"highlight_end":12},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            // Handle the case when called with no arguments, i.e. matrix![]","highlight_start":1,"highlight_end":77},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":40},{"text":"            Matrix::new(0, 0, vec![])","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($( $( $x: expr ),*);*) => {","highlight_start":1,"highlight_end":33},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            use $crate::matrix::Matrix;","highlight_start":1,"highlight_end":40},{"text":"            let data_as_nested_array = [ $( [ $($x),* ] ),* ];","highlight_start":1,"highlight_end":63},{"text":"            let rows = data_as_nested_array.len();","highlight_start":1,"highlight_end":51},{"text":"            let cols = data_as_nested_array[0].len();","highlight_start":1,"highlight_end":54},{"text":"            let data_as_flat_array: Vec<_> = data_as_nested_array.into_iter()","highlight_start":1,"highlight_end":78},{"text":"                .flat_map(|row| row.into_iter())","highlight_start":1,"highlight_end":49},{"text":"                .cloned()","highlight_start":1,"highlight_end":26},{"text":"                .collect();","highlight_start":1,"highlight_end":28},{"text":"            Matrix::new(rows, cols, data_as_flat_array)","highlight_start":1,"highlight_end":56},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/perceptron/perceptron.rs:29:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    let w = matrix![-0.5, -0.5];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"6 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 6 warnings emitted\u001b[0m\n\n"}
